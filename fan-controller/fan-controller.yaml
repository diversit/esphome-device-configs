esphome:
  name: fan-controller
  friendly_name: fan controller

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "dmfYeb0wN6dioTEAGcwZ+4m3LcslLQOAeq+w2Rf/Ono="

ota:
  - platform: esphome
    password: "9800334ec3e437e39b5a19b805da821e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "Fan-Controller Fallback Hotspot"
#     password: "5KBDjuX9klGN"

# captive_portal:

i2c:
  sda: D2
  scl: D1

sensor:
  - platform: uptime
    name: "Uptime"
    id: fan_controller_uptime

  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: fan_controller_wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy
    source_id: fan_controller_wifi_signal_db
    name: "WiFi Signal Percent"
    filters: 
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

  - platform: pulse_counter
    pin: GPIO0 # D3
    name: Fan 1 RPM
    id: fan1_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 5s
    accuracy_decimals: 0 # only whole values

  - platform: pulse_counter
    pin: GPIO12 # D6
    name: Fan 2 RPM
    id: fan2_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 5s
    accuracy_decimals: 0 # only whole values

  - platform: dht
    pin: GPIO14 # D5
    # model: DHT22
    temperature: 
      name: "Serverkast temperatuur"
      id: serverkast_temperature
      accuracy_decimals: 1
    humidity: 
      name: "Serverkast luchtvochtigheid"
      id: serverkast_humidity
    update_interval: 30s

output:
  - platform: esp8266_pwm
    pin: GPIO2 # D4
    frequency: 25000 Hz # 25kHz required according to Noctua spec
    id: fan1_pwm_output
  - platform: esp8266_pwm
    pin: GPIO13 # D7
    frequency: 25000 Hz # 25kHz required according to Noctua spec
    id: fan2_pwm_output

fan:
  - platform: speed
    output: fan1_pwm_output
    name: "Fan 1 PWM"
    restore_mode: ALWAYS_ON
  - platform: speed
    output: fan2_pwm_output
    name: "Fan 2 PWM"
    restore_mode: ALWAYS_ON

font:
  - file: "gfonts://Roboto Mono"
    id: roboto_mono_20
    size: 20
  - file: "gfonts://Roboto Mono"
    id: roboto_mono_10
    size: 10
  - file: "gfonts://Roboto Mono"
    id: roboto_mono_8
    size: 8

display:
  - platform: ssd1306_i2c
    model: SSD1306_128X32
    address: 0x3C
    rotation: 0
    lambda: |-
      // print Fan RPM's
      if (id(fan1_pulse).has_state()) {
        it.printf( 0, 16, id(roboto_mono_10), TextAlign::BASELINE_LEFT, "Fan 1:%.0f RPM", id(fan1_pulse).state);
      } else {
        it.print(0, 10, id(roboto_mono_20), "Booting...");
      }

      if (id(fan2_pulse).has_state()) {
        it.printf( 0, 32, id(roboto_mono_10), TextAlign::BASELINE_LEFT, "Fan 2:%.0f RPM", id(fan2_pulse).state);
      }

      if (id(serverkast_temperature).has_state()) {
        it.printf(it.get_width(), 16, id(roboto_mono_10), TextAlign::BASELINE_RIGHT, "%.1fÂ°C", id(serverkast_temperature).state);
      }
      if (id(serverkast_humidity).has_state()) {
        it.printf(it.get_width(), 32, id(roboto_mono_10), TextAlign::BASELINE_RIGHT, "%1.f%%", id(serverkast_humidity).state);
      }
